/*! tailwindcss v4.0.17 | MIT License | https://tailwindcss.com */
.cat-card {
  margin-inline: auto;
  max-width: var(--container-sm, 24rem);
  overflow: hidden;
  border-radius: var(--radius-lg, 0.5rem);
  background-color: var(--color-gray-800, oklch(0.278 0.033 256.848));
  --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}
.cat-card__content {
  position: relative;
  aspect-ratio: 1 / 1;
  width: 100%;
  background-color: var(--color-gray-700, oklch(0.373 0.034 259.733));
  display: flex;
  align-items: center;
  justify-content: center;
}
.cat-card__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
  transition-property: opacity;
  transition-timing-function: var(--tw-ease, var(--default-transition-timing-function, cubic-bezier(0.4, 0, 0.2, 1)));
  transition-duration: var(--tw-duration, var(--default-transition-duration, 150ms));
  --tw-duration: 300ms;
  transition-duration: 300ms;
}
.cat-card__loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: calc(var(--spacing, 0.25rem) * 2);
  color: var(--color-gray-300, oklch(0.872 0.01 258.338));
}
.cat-card__loading .iconify {
  animation: var(--animate-spin, spin 1s linear infinite);
  font-size: var(--text-4xl, 2.25rem);
  line-height: var(--tw-leading, var(--text-4xl--line-height, calc(2.5 / 2.25)));
  color: #f84525;
}
.cat-card__error {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: calc(var(--spacing, 0.25rem) * 2);
  padding: calc(var(--spacing, 0.25rem) * 4);
  text-align: center;
  color: var(--color-red-400, oklch(0.704 0.191 22.216));
}
.cat-card__error .iconify {
  font-size: var(--text-4xl, 2.25rem);
  line-height: var(--tw-leading, var(--text-4xl--line-height, calc(2.5 / 2.25)));
}
.cat-card__refresh {
  width: 100%;
  background-color: #f84525;
  padding-inline: calc(var(--spacing, 0.25rem) * 4);
  padding-block: calc(var(--spacing, 0.25rem) * 3);
  color: var(--color-white, #fff);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: calc(var(--spacing, 0.25rem) * 2);
  transition-property: all;
  transition-timing-function: var(--tw-ease, var(--default-transition-timing-function, cubic-bezier(0.4, 0, 0.2, 1)));
  transition-duration: var(--tw-duration, var(--default-transition-duration, 150ms));
  --tw-duration: 200ms;
  transition-duration: 200ms;
  &:hover {
    @media (hover: hover) {
      background-color: #d63a1c;
    }
  }
  &:focus {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  &:focus {
    --tw-ring-color: #f84525;
  }
  &:focus {
    --tw-ring-offset-width: 2px;
    --tw-ring-offset-shadow: var(--tw-ring-inset,) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  }
  &:focus {
    --tw-ring-offset-color: var(--color-gray-800, oklch(0.278 0.033 256.848));
  }
  &:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  &:disabled {
    cursor: not-allowed;
  }
  &:disabled {
    opacity: 50%;
  }
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
